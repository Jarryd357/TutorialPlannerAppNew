package TutorialPlannerApp.utilities;

import TutorialPlannerApp.factories.StudentFactory;
import TutorialPlannerApp.repositories.Impl.StudentRepositoryImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import TutorialPlannerApp.domain.Student;
import TutorialPlannerApp.repositories.StudentRepository;

import java.util.HashMap;
import java.util.Map;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController
{
    @Autowired // This means to get the bean called studentRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    private StudentRepository studentRepository;
    Map<String,String> values;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewStudent (@RequestParam String studentID, @RequestParam String firstName, @RequestParam String lastName,
                                               @RequestParam String studyYear, @RequestParam String email)
    {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        //Student s = new Student();
        //n.setName(name);
        //n.setEmail(email);
       // userRepository.save(n);
        //return "Saved";

        values = new HashMap<String, String>();
        values.put("firstName","Jane");
        values.put("lastName","Wick");
        values.put("studyYear","Third Year");
        values.put("email","killemallagain@gmail.com");

        studentRepository = StudentRepositoryImpl.getInstance();
        Student student = StudentFactory.getStudent(values,"002");
        studentRepository.create(student);
        studentRepository.save(student);

        return "Saved";
    }

    //@GetMapping(path="/all")
   // public @ResponseBody Iterable<Student> getAllStudents()
    //{
        // This returns a JSON or XML with the users
        //return studentRepository.findAll();
    //}
}
